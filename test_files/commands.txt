Update curr_balance:

insert into curr_balances
select * from (
	select gl_code, sum(amount)
	from postings
	group by gl_code
) as origin

///DATA UPLOAD///

create table temp_document (
	user_code integer not null,
	document_date date not null,
	document_type varchar(4) not null,
	company varchar(4) not null
);

create table temp_postings (
	gl_code varchar(10) not null,
	position integer not null,
	amount numeric(20, 4) not null,
	cost_center varchar(4),
	reg_date date not null,
	acc_center varchar(4),
	eff_date date not null,
	document_num integer
);


\copy temp_posting(gl_code, position, amount, cost_center, reg_date, acc_center, eff_date) 
FROM 'C:\Users\lucia\MEGAsync\Udemy\The Web Developer Bootcamp\Test\Analyzer\test_files\postings2.csv' 
WITH (FORMAT CSV, HEADER, DELIMITER ';');

\copy document(user_code, document_date, document_type, company) 
FROM 'C:\Users\lucia\MEGAsync\Udemy\The Web Developer Bootcamp\Test\Analyzer\test_files\document.csv' 
WITH (FORMAT CSV, HEADER, DELIMITER ';');

insert into document (user_code, document_date, document_type, company)
select *
from temp_document;

update temp_postings 
set document_num = (
	select document_num
	from "document"
	order by document_num desc
	limit 1
	)
	
insert into postings(gl_code, position, amount, cost_center, reg_date, acc_center, eff_date, document_num)
select *
from temp_postings;

drop table temp_postings;
drop table temp_document;

psql -h 140.238.216.93 -U postgres -d analyzer -c "create temp table temp_document (user_code integer not null, document_date date not null, document_type varchar(4) not null, company varchar(4) not null); create temp table temp_postings (gl_code varchar(10) not null, position integer not null, amount numeric(20, 4) not null, cost_center varchar(4), reg_date date not null, acc_center varchar(4), eff_date date not null, order_num integer, discount numeric(5,4), pay_mode varchar(4), suppl_code varchar(4), location varchar(4), country_code varchar(4), document_num integer);" -c "\copy temp_postings(gl_code, position, amount, cost_center, reg_date, acc_center, eff_date, order_num, discount, pay_mode, suppl_code, location, country_code) FROM 'C:\Users\lucia\MEGAsync\Udemy\The Web Developer Bootcamp\Test\Analyzer\test_files\postings2.csv' WITH (FORMAT CSV, HEADER, DELIMITER ';')" -c "\copy temp_document(user_code, document_date, document_type, company) FROM 'C:\Users\lucia\MEGAsync\Udemy\The Web Developer Bootcamp\Test\Analyzer\test_files\document.csv' WITH (FORMAT CSV, HEADER, DELIMITER ';')" -c "call data_loading();"

Update current balances:

with new_balances as (
	select gl_code, sum(amount) as total
	from temp_postings
	group by gl_code
)
update curr_balances
set current = current + new_balances.total
from new_balances
where new_balances.gl_code = curr_balances.gl_code;

Render COA (first version):

CREATE OR REPLACE FUNCTION public.render_custom_coa()
 RETURNS TABLE(element character varying, gl_description character varying, balance numeric)
 LANGUAGE plpgsql
AS $function$
begin
return query (
	with temp_table as (
		with inner_temp as (
		select *
		from chart_of_accounts coa join curr_balances cb on coa.element=cb.gl_code
		)
			(select level_1 as element, sum(amount) as total
			from inner_temp
			where level_1 is not null and period = 'current'
			group by level_1)
			union
			(select level_2 as element, sum(amount) as total
			from inner_temp
			where level_2 is not null and period = 'current'
			group by level_2)
			union
			(select level_3 as element, sum(amount) as total
			from inner_temp
			where level_3 is not null and period = 'current'
			group by level_3)
			union
			(select level_4 as element, sum(amount) as total
			from inner_temp
			where level_4 is not null and period = 'current'
			group by level_4)
			union
			(select level_5 as element, sum(amount) as total
			from inner_temp
			where level_5 is not null and period = 'current'
			group by level_5)
			union
			(select category as element, sum(amount) as total
			from inner_temp it join account_list al on it.element=al.gl_code
			where it.period = 'current'
			group by category)
			union
			(select gl_code as element, amount as total
			from curr_balances
			where period = 'current')
	)
	select 
		t.element,
		al.description,
		case when tt.total is null then 0 :: numeric(20,4) else tt.total end
	from chart_of_accounts t left join temp_table tt on t.element = tt.element left join account_list al on t.element = al.gl_code
	order by serial_num
);
end
$function$
;

Render COA (second version):

CREATE OR REPLACE FUNCTION public.test_current_coa()
 RETURNS TABLE(element character varying, gl_description character varying, balance numeric)
 LANGUAGE plpgsql
AS $function$
begin
return query (
	with temp_table as (
		with inner_temp as (
		select *
		from chart_of_accounts coa join curr_balances cb on coa.element=cb.gl_code
		where cb.period = 'current'
		)
			(select level_1 as element, sum(amount) as total
			from inner_temp
			where level_1 is not null
			group by level_1)
			union
			(select level_2 as element, sum(amount) as total
			from inner_temp
			where level_2 is not null
			group by level_2)
			union
			(select level_3 as element, sum(amount) as total
			from inner_temp
			where level_3 is not null
			group by level_3)
			union
			(select level_4 as element, sum(amount) as total
			from inner_temp
			where level_4 is not null
			group by level_4)
			union
			(select level_5 as element, sum(amount) as total
			from inner_temp
			where level_5 is not null
			group by level_5)
			union
			(select category as element, sum(amount) as total
			from inner_temp it join account_list al on it.element=al.gl_code
			group by category)
			union
			(select gl_code as element, amount as total
			from inner_temp
			)
	)
	select 
		t.element,
		al.description,
		case when tt.total is null then 0 :: numeric(20,4) else tt.total end
	from chart_of_accounts t left join temp_table tt on t.element = tt.element left join account_list al on t.element = al.gl_code
	order by serial_num
);
end
$function$
;

TEMP:

CREATE OR REPLACE FUNCTION public.render_current_coa()
 RETURNS TABLE(element character varying, gl_description character varying, balance numeric)
 LANGUAGE plpgsql
AS $function$
begin
return query (
	with temp_table as (
		with inner_temp as (
		select *
		from chart_of_accounts coa join curr_balances cb on coa.element=cb.gl_code
		where cb.period = 'current'
		)
			(select level_1 as element, sum(amount) as total
			from inner_temp
			where level_1 is not null
			group by level_1)
			union
			(select level_2 as element, sum(amount) as total
			from inner_temp
			where level_2 is not null
			group by level_2)
			union
			(select level_3 as element, sum(amount) as total
			from inner_temp
			where level_3 is not null
			group by level_3)
			union
			(select level_4 as element, sum(amount) as total
			from inner_temp
			where level_4 is not null
			group by level_4)
			union
			(select level_5 as element, sum(amount) as total
			from inner_temp
			where level_5 is not null
			group by level_5)
			union
			(select category as element, sum(amount) as total
			from inner_temp it join account_list al on it.element=al.gl_code
			group by category)
			union
			(select gl_code as element, amount as total
			from inner_temp
			)
	)
	select 
		t.element,
		al.description,
		case when tt.total is null then 0 :: numeric(20,4) else tt.total end
	from chart_of_accounts t left join temp_table tt on t.element = tt.element left join account_list al on t.element = al.gl_code
	order by serial_num
);
end
$function$
;

OLD LOADING:

CREATE OR REPLACE PROCEDURE public.data_loading()
 LANGUAGE plpgsql
AS $procedure$
declare
	document_number integer;
begin
insert into document (user_code, document_date, document_type, company)
select *
from temp_document;

select document_num
into document_number
from document
order by document_num desc
limit 1;

update user_list
set doc_count = doc_count + 1
where user_code = (select user_code from temp_document);

update temp_postings 
set document_num = document_number;
	
insert into postings(gl_code, position, amount, cost_center, reg_date, acc_center, eff_date, order_num, discount, pay_mode, suppl_code, location, country_code, document_num)
select *
from temp_postings;

update user_list
set postings_count = postings_count + (select count(*) from temp_postings)
where user_code = (select user_code from temp_document);

with new_balances as (
	select gl_code, sum(amount) as total
	from temp_postings
	group by gl_code
)
update curr_balances
set amount = amount + new_balances.total
from new_balances
where new_balances.gl_code = curr_balances.gl_code and curr_balances.period = 'current';

if (select count(*) from temp_postings) = 0 then
	delete from document where document_num = document_number;
	update user_list
	set doc_count = doc_count - 1
	where user_code = (select user_code from temp_document);
end if;

drop table temp_postings;
drop table temp_document;

end
$procedure$
;

OLD DELETE:

CREATE OR REPLACE PROCEDURE public.delete_doc(IN doc_num integer)
 LANGUAGE plpgsql
AS $procedure$
declare
	curr_year real;
begin
	select date_part('year', document_date)
	into curr_year
	from document
	where document_num = doc_num;
	if curr_year = date_part('year', current_date) then
		with delete_table as (
			select gl_code, sum(amount) as total
			from postings
			where document_num = doc_num
			group by gl_code
		)
		update curr_balances
		set amount = amount - delete_table.total
		from delete_table
		where delete_table.gl_code = curr_balances.gl_code and curr_balances.period = 'current';
		update user_list
		set postings_count = postings_count - (select count(*) from postings where document_num = doc_num)
		where user_code = (select user_code from document where document_num = doc_num);
		delete from postings where document_num = doc_num;
		update user_list
		set doc_count = doc_count - 1
		where user_code = (select user_code from document where document_num = doc_num);
		delete from document where document_num = doc_num;
	end if;
end
$procedure$
;

OLD MONTH CLOSE:

CREATE OR REPLACE PROCEDURE public.month_end_close()
 LANGUAGE plpgsql
AS $procedure$
declare document_number integer;
begin
	create temp table temp_0b (
		gl_code varchar(10),
		position integer,
		amount numeric(20,4)
	);
	insert into temp_0b(gl_code, position, amount)
	select 
		gl_code,
		case when position = 40 then 50 else case when position = 50 then 40 else 50 end end,
		amount*-1
	from 
		postings
	where 
		case when date_part('month', current_date) <> 1 then
			date_part('year', eff_date) = date_part('year', current_date) and date_part('month', eff_date) = date_part('month', current_date) - integer '1'
		else 
			date_part('year', eff_date) = date_part('year', current_date) - integer '1' and date_part('month', eff_date) = 12
		end;
	insert into document (user_code, document_date, document_type, company)
	values (13, current_date, 'YYYY', '1456');
	update user_list
	set doc_count = doc_count + 1
	where user_code = 13;
	select document_num into document_number from document order by document_num desc limit 1;
	insert into postings(gl_code, position, amount, cost_center, reg_date, acc_center, eff_date, document_num)
	select temp_0b.gl_code, temp_0b.position, temp_0b.amount, null, current_date, null, current_date, document_number
	from temp_0b;
	update user_list
	set postings_count = postings_count + (select count(*) from temp_0b)
	where user_code = 13;
	with closing_am as (
		select gl_code, sum(amount) as total
		from postings
		where document_num = document_number
		group by gl_code
	)
	update curr_balances
	set amount = amount + closing_am.total
	from closing_am
	where closing_am.gl_code = curr_balances.gl_code and curr_balances.period = 'current';
	drop table temp_0b;
end
$procedure$
;

YEAR END CLOSE:

CREATE OR REPLACE PROCEDURE public.year_end_close()
 LANGUAGE plpgsql
AS $procedure$
declare
	prev_year real := date_part('year', current_date)- integer '1';
	pl_result numeric(20, 4);
	document_number integer;
	closing_post_n integer;
begin
	insert into curr_balances(gl_code, amount, period)
	select gl_code, amount, date_part('year', current_date)- integer '1'||'-12-31'
	from curr_balances
	where period = 'current';
	create temp table temp_pl (
		gl_code varchar(10),
		position integer,
		amount numeric(20,4)
	);
	insert into temp_pl(gl_code, position, amount)
	select 
		po.gl_code,
		case when sum(amount)*-1 >= 0 then 40 else 50 end,
		sum(amount)*-1
	from 
		postings po join account_list al on po.gl_code = al.gl_code
	where 
		date_part('year', eff_date) = prev_year and category = 'Profit/loss'
	group by po.gl_code;
	select sum(amount) into pl_result from temp_pl;
	insert into document (user_code, document_date, document_type, company)
	values (13, current_date, 'ZZZZ', '1456');
	update user_list
	set doc_count = doc_count + 1
	where user_code = 13;
	select document_num into document_number from document order by document_num desc limit 1;
	insert into postings(gl_code, position, amount, cost_center, reg_date, acc_center, eff_date, document_num)
	select temp_pl.gl_code, temp_pl.position, temp_pl.amount, null, current_date, null, current_date, document_number
	from temp_pl;
	insert into postings(gl_code, position, amount, cost_center, reg_date, acc_center, eff_date, document_num)
	values ('0021000040', case when pl_result > 0 then 50 else 40 end, pl_result*-1, null, current_date, null, current_date, document_number),
	('0021000040', case when pl_result > 0 then 40 else 50 end, pl_result, null, current_date, null, current_date, document_number);
	closing_post_n = (select count(*) from temp_pl) + 2;
	if pl_result > 0 then 
		insert into postings(gl_code, position, amount, cost_center, reg_date, acc_center, eff_date, document_num)
		values ('0021000010', 50, pl_result*-0.5, null, current_date, null, current_date, document_number),
		('0021000030', 50, pl_result*-0.5, null, current_date, null, current_date, document_number),
		('0021000010', 40, pl_result*0.5, null, current_date, null, current_date, document_number),
		('0011000000', 50, pl_result*-0.5, null, current_date, null, current_date, document_number);
		closing_post_n = closing_post_n + 4;
	else
		insert into postings(gl_code, position, amount, cost_center, reg_date, acc_center, eff_date, document_num)
		values ('0021000000', 40, pl_result*-1, null, current_date, null, current_date, document_number);
		closing_post_n = closing_post_n + 1;
	end if;
	update user_list
	set postings_count = postings_count + closing_post_n
	where user_code = 13;
	with closing_am as (
		select gl_code, sum(amount) as total
		from postings
		where document_num = document_number
		group by gl_code
	)
	update curr_balances
	set amount = amount + closing_am.total
	from closing_am
	where closing_am.gl_code = curr_balances.gl_code and curr_balances.period = 'current';
	drop table temp_pl;
end
$procedure$
;
